---
import { DynamicRenderer } from '@core/components/ui/dynamic-renderer';
import type { CollectionTypes } from '@content/content.types';
import { getEntry } from 'astro:content';
import Snippet from '../snippet/snippet.astro';
import { cn } from '@core/lib/utils';
import Fallback from './fallback.astro';
import { ZodError } from 'zod';
import { docsSchema } from "@content/config"

type Props = {
  className?: string;
  collection: CollectionTypes;
  slug: string;
};

const { className, collection, slug } = Astro.props;

const page = await getEntry(collection, slug);

function parseCollection(page:any){
  try{
    const parsedDocs = docsSchema.parse(page)
    return parsedDocs
  }catch(error){
    if(error instanceof ZodError){
      throw new Error(error.message)
    }
  }
}

const parsedPage = parseCollection(page?.data)
---

<div id="docs-container" class={cn('w-full h-fit', className)}>
  <section class="flex flex-col gap-8">
    {parsedPage ? (
      <>
        <div class="flex flex-col gap-2">
          <h1 class="text-3xl font-medium">{parsedPage.title}</h1>
          <h3 class="text-xl font-light">{parsedPage.description}</h3>
        </div>

        <tab-list>
          <div role="tablist" class="flex  border-b-[1px] border-gray-400">
            {parsedPage.versions.map((version, index) => (
              <button
                id={`tab-${version.framework}`}
                role="tab"
                aria-controls={`${version.framework}-panel`}
                aria-selected={index === 0 ? "true" : "false"}
                class={cn('px-8 py-2 capitalize border-b-2 border-transparent', index === 0 && 'tabUnderline')}
              >
                {version.framework}
              </button>
            ))}
          </div>

          <div tabs-container>
            {parsedPage.versions.map((version, index) => (
              <div
                id={`${version.framework}-panel`}
                tab-content={version.framework}
                class={cn(index !== 0 && 'hidden')}
                aria-hidden={index !== 0 ? "true" : "false"}
              >
                
                  {version.component && 
                    (
                      <div class="w-full min-h-96 justify-center items-center flex mt-4">
                        <DynamicRenderer componentName={version.component} client:idle />
                      </div>
                    )
                  }

                <div class="flex flex-col gap-2 mt-8">
                  {version.content.map(block => {
                    switch (block.type) {
                      case 'header':
                        return <h1 class="text-xl font-medium mt-8" set:html={block.value} />;
                      case 'description':
                        return <p class="text-base w-3/4 text-gray-600" set:html={block.value} />;
                      case 'code':
                        return (
                          <Snippet
                            filename={block.filename}
                            lang={block.lang}
                            code={block.value}
                            className="my-4"
                          />
                        );
                      default:
                        return null;
                    }
                  })}
                </div>

                {version.variants?.map(variant => (
                  <div class="flex flex-col gap-4 mt-8">
                    <h3 class="text-xl font-semibold">{variant.header}</h3>
                    <div class="w-full h-80 justify-center items-center flex">
                      <DynamicRenderer componentName={variant.component} client:idle />
                    </div>
                    <Snippet
                      code={variant.code.value}
                      className="my-4"
                    />
                  </div>
                ))}
              </div>
            ))}
          </div>
        </tab-list>

        <div>
          <h3 class="text-xl">Brought to you by @{parsedPage.creator}</h3>
        </div>
      </>
    ) 
    :
    (
      <Fallback />
    )}
  </section>
</div>

<style>
  .tabUnderline{
    border-bottom: solid 2px black;
  } 
</style>

<script>
  class Tabs extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const buttons = this.querySelectorAll("[role='tablist'] > button");
      const tabs = this.querySelectorAll("[tabs-container] > [tab-content]");

      buttons.forEach(button => {
        button.addEventListener("click", () => {
          const tabName = button.getAttribute("aria-controls");

          tabs.forEach(tab => {
            const isSelected = tab.id === tabName;
            tab.setAttribute("aria-hidden", tab.id);
            tab.classList.toggle("hidden", !isSelected);
          });

          buttons.forEach(btn => {
            const isCurrentButton = btn === button;
            btn.setAttribute("aria-selected", isCurrentButton.toString());
            btn.classList.toggle("tabUnderline", isCurrentButton);
          });
        });
      });
    }
  }

  customElements.define("tab-list", Tabs);
</script>